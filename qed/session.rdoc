= Session

The Session class is the primary controller of the Sow system. By setting up a Session object, you can then have it create, update or remove a scaffold.

  require 'sow/session'

Given that we have Sow sources setup, and a scaffold as defined in scaffold_layout.rdoc[qed://scaffold_layout.rdoc]. To create a session we need a +resource+, which is the name of a scaffold, the +destination+ for the scaffolding, an  +environment+, which is a Hash that becomes part of template metadata, and general options that control operation, such as +action+,  +force+, +skip+, etc.

  resource = 'demo'

  destination = File.join(Dir.tmpdir, 'sow', 'myapp')

  environment = {:name => 'myapp'}

  options = {:action=>:create}

  session = Sow::Session.new(resource, destination, environment, options)

With the instantiation of a Session object, a fair amount of information is setup. For starters, the session has found the scaffold associated with the +resource+.

  session.location.basename == 'demo'

You will also notice that it has convered paths to Pathname objects.

  session.destination.assert.is_a?(Pathname)

Using the +location+ the Session creates a Scaffold object, which models the contents of the scaffold.

  session.scaffold.is_a?(Sow::Scaffold)

We will not go in depth with the Scaffold class here (see the scaffold.rdoc demonstradum for that), but to point out that it extecutes the scaffold's Sowfile and from it creates a +copylist+.

  session.copylist

This +copylist+ is then passed to the selected "action" generator.

  session.generator

And it is this generator that handles the final stage of execution which is the actual rendering of templates and copying file to (or deleting files from) the destination.



